//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_80
.address_size 64

	// .globl	triton_
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 assertFunc_1[25] = {95, 99, 97, 108, 108, 95, 119, 105, 116, 104, 95, 102, 114, 97, 109, 101, 115, 95, 114, 101, 109, 111, 118, 101, 100};
.global .align 1 .b8 assertFile_1[38] = {60, 102, 114, 111, 122, 101, 110, 32, 105, 109, 112, 111, 114, 116, 108, 105, 98, 46, 95, 98, 111, 111, 116, 115, 116, 114, 97, 112, 95, 101, 120, 116, 101, 114, 110, 97, 108, 62};
.global .align 1 .b8 assertMessage_1[37] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 56, 32, 60, 32, 50, 48, 52, 56};
.global .align 1 .b8 assertFunc_0[25] = {95, 99, 97, 108, 108, 95, 119, 105, 116, 104, 95, 102, 114, 97, 109, 101, 115, 95, 114, 101, 109, 111, 118, 101, 100};
.global .align 1 .b8 assertFile_0[38] = {60, 102, 114, 111, 122, 101, 110, 32, 105, 109, 112, 111, 114, 116, 108, 105, 98, 46, 95, 98, 111, 111, 116, 115, 116, 114, 97, 112, 95, 101, 120, 116, 101, 114, 110, 97, 108, 62};
.global .align 1 .b8 assertMessage_0[37] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 51, 32, 60, 32, 50, 48, 52, 56};

.visible .entry triton_(
	.param .u64 triton__param_0,
	.param .u64 triton__param_1,
	.param .u64 triton__param_2,
	.param .u64 triton__param_3,
	.param .u64 triton__param_4,
	.param .u64 triton__param_5,
	.param .u64 triton__param_6,
	.param .u64 triton__param_7,
	.param .u64 triton__param_8,
	.param .u64 triton__param_9,
	.param .u64 triton__param_10,
	.param .u32 triton__param_11
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<55>;
	.reg .b32 	%r<78>;
	.reg .f32 	%f<73>;
	.reg .b64 	%rd<188>;
	.loc	1 24 0
$L__func_begin0:
	.loc	1 24 0

	ld.param.u64 	%rd15, [triton__param_1];
	ld.param.u64 	%rd101, [triton__param_0];
$L__tmp0:
	.loc	1 26 28
	// begin inline asm
	mov.u32 %r12, %ctaid.x;
	// end inline asm
	.loc	1 26 33
	shl.b32 	%r13, %r12, 10;
	ld.param.u64 	%rd102, [triton__param_2];
	.loc	1 27 36
	mov.u32 	%r14, %tid.x;
	shl.b32 	%r15, %r14, 2;
	ld.param.u64 	%rd103, [triton__param_4];
	and.b32  	%r16, %r15, 508;
	.loc	1 27 23
	or.b32  	%r17, %r13, %r16;
	ld.param.u64 	%rd104, [triton__param_6];
	or.b32  	%r18, %r17, 512;
	ld.param.u64 	%rd105, [triton__param_8];
	.loc	1 29 20
	shr.s32 	%r19, %r17, 31;
	shr.u32 	%r20, %r19, 18;
	add.s32 	%r21, %r17, %r20;
	shr.s32 	%r22, %r21, 14;
	add.s32 	%r23, %r18, %r20;
	shr.s32 	%r24, %r23, 14;
	and.b32  	%r25, %r21, -16384;
	sub.s32 	%r2, %r17, %r25;
	and.b32  	%r26, %r23, -16384;
	sub.s32 	%r3, %r18, %r26;
	.loc	1 32 30
	mul.wide.s32 	%rd106, %r22, 8;
	add.s64 	%rd22, %rd101, %rd106;
	mul.wide.s32 	%rd107, %r24, 8;
	add.s64 	%rd30, %rd101, %rd107;
	mov.pred 	%p45, -1;
	.loc	1 32 35
	// begin inline asm
	mov.u64 %rd21, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd21 }, [ %rd22 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd23, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd23 }, [ %rd22 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd25, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd25 }, [ %rd22 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd27, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd27 }, [ %rd22 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd29, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd29 }, [ %rd30 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd31, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd31 }, [ %rd30 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd33, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd33 }, [ %rd30 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd35, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd35 }, [ %rd30 + 0 ];
	// end inline asm
	.loc	1 33 30
	add.s64 	%rd38, %rd102, %rd106;
	add.s64 	%rd46, %rd102, %rd107;
	.loc	1 33 35
	// begin inline asm
	mov.u64 %rd37, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd37 }, [ %rd38 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd39, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd39 }, [ %rd38 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd41, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd41 }, [ %rd38 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd43, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd43 }, [ %rd38 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd45, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd45 }, [ %rd46 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd47, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd47 }, [ %rd46 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd49, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd49 }, [ %rd46 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd51, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd51 }, [ %rd46 + 0 ];
	// end inline asm
	.loc	1 34 31
	add.s64 	%rd54, %rd103, %rd106;
	add.s64 	%rd62, %rd103, %rd107;
	.loc	1 34 36
	// begin inline asm
	mov.u64 %rd53, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd53 }, [ %rd54 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd55, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd55 }, [ %rd54 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd57, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd57 }, [ %rd54 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd59, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd59 }, [ %rd54 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd61, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd61 }, [ %rd62 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd63, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd63 }, [ %rd62 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd65, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd65 }, [ %rd62 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd67, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd67 }, [ %rd62 + 0 ];
	// end inline asm
	.loc	1 35 31
	add.s64 	%rd70, %rd104, %rd106;
	add.s64 	%rd78, %rd104, %rd107;
	.loc	1 35 36
	// begin inline asm
	mov.u64 %rd69, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd69 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd71, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd71 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd73, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd73 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd75, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd75 }, [ %rd70 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd77, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd77 }, [ %rd78 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd79, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd79 }, [ %rd78 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd81, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd81 }, [ %rd78 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd83, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd83 }, [ %rd78 + 0 ];
	// end inline asm
	.loc	1 36 31
	add.s64 	%rd86, %rd105, %rd106;
	add.s64 	%rd94, %rd105, %rd107;
	.loc	1 36 36
	// begin inline asm
	mov.u64 %rd85, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd85 }, [ %rd86 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd87, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd87 }, [ %rd86 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd89, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd89 }, [ %rd86 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd91, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd91 }, [ %rd86 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd93, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd93 }, [ %rd94 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd95, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd95 }, [ %rd94 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd97, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd97 }, [ %rd94 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd99, 0x0;
	@%p45 ld.global.L1::evict_last.b64 { %rd99 }, [ %rd94 + 0 ];
	// end inline asm
	.loc	1 39 32
	shr.u64 	%rd108, %rd29, 52;
	shr.u64 	%rd109, %rd21, 52;
	and.b64  	%rd110, %rd109, 2048;
	and.b64  	%rd111, %rd108, 2048;
	add.s64 	%rd9, %rd111, %rd29;
	add.s64 	%rd10, %rd110, %rd21;
	.loc	1 40 50
	or.b64  	%rd112, %rd9, %rd10;
	setp.lt.u64 	%p41, %rd112, 2048;
	mov.b32 	%r77, 843;
	mov.u64 	%rd187, 1;
	@%p41 bra 	$L__BB0_2;
	mov.u64 	%rd113, assertMessage_0;
	cvta.global.u64 	%rd114, %rd113;
	mov.u64 	%rd115, assertFile_0;
	cvta.global.u64 	%rd116, %rd115;
	mov.u64 	%rd117, assertFunc_0;
	cvta.global.u64 	%rd118, %rd117;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd114;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd116;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r77;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd118;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd187;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 0
$L__BB0_2:
	.loc	1 0 50
	ld.param.u64 	%rd20, [triton__param_10];
	ld.param.u64 	%rd19, [triton__param_9];
	ld.param.u64 	%rd18, [triton__param_7];
	ld.param.u64 	%rd17, [triton__param_5];
	ld.param.u64 	%rd16, [triton__param_3];
	.loc	1 41 36
	cvt.s64.s32 	%rd11, %r2;
	cvt.s64.s32 	%rd12, %r3;
	.loc	1 41 30
	shl.b64 	%rd122, %rd10, 16;
	add.s64 	%rd123, %rd15, %rd122;
	mul.wide.s32 	%rd124, %r2, 4;
	add.s64 	%rd120, %rd123, %rd124;
	shl.b64 	%rd125, %rd9, 16;
	add.s64 	%rd126, %rd15, %rd125;
	mul.wide.s32 	%rd127, %r3, 4;
	add.s64 	%rd121, %rd126, %rd127;
	.loc	1 41 50
	// begin inline asm
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	mov.u32 %r30, 0x0;
	mov.u32 %r31, 0x0;
	@%p45 ld.global.v4.b32 { %r28, %r29, %r30, %r31 }, [ %rd120 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	@%p45 ld.global.v4.b32 { %r32, %r33, %r34, %r35 }, [ %rd121 + 0 ];
	// end inline asm
	.loc	1 44 32
	shr.u64 	%rd128, %rd45, 52;
	shr.u64 	%rd129, %rd37, 52;
	and.b64  	%rd130, %rd129, 2048;
	and.b64  	%rd131, %rd128, 2048;
	add.s64 	%rd13, %rd131, %rd45;
	add.s64 	%rd14, %rd130, %rd37;
	.loc	1 45 50
	or.b64  	%rd132, %rd13, %rd14;
	setp.lt.u64 	%p44, %rd132, 2048;
	@%p44 bra 	$L__BB0_4;
	mov.u64 	%rd133, assertMessage_1;
	cvta.global.u64 	%rd134, %rd133;
	mov.u64 	%rd135, assertFile_1;
	cvta.global.u64 	%rd136, %rd135;
	mov.u64 	%rd137, assertFunc_1;
	cvta.global.u64 	%rd138, %rd137;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd134;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd136;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r77;
	.param .b64 param3;
	st.param.b64 	[param3+0], %rd138;
	.param .b64 param4;
	st.param.b64 	[param4+0], %rd187;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 1
$L__BB0_4:
	.loc	1 41 50
	mov.b32 	%f1, %r35;
	mov.b32 	%f2, %r34;
	mov.b32 	%f3, %r33;
	mov.b32 	%f4, %r32;
	mov.b32 	%f5, %r31;
	mov.b32 	%f6, %r30;
	mov.b32 	%f7, %r29;
	mov.b32 	%f8, %r28;
	.loc	1 46 30
	shl.b64 	%rd150, %rd14, 16;
	add.s64 	%rd151, %rd16, %rd150;
	shl.b64 	%rd152, %rd11, 2;
	add.s64 	%rd140, %rd151, %rd152;
	shl.b64 	%rd153, %rd13, 16;
	add.s64 	%rd154, %rd16, %rd153;
	shl.b64 	%rd155, %rd12, 2;
	add.s64 	%rd141, %rd154, %rd155;
	.loc	1 46 50
	// begin inline asm
	mov.u32 %r37, 0x0;
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	@%p45 ld.global.v4.b32 { %r37, %r38, %r39, %r40 }, [ %rd140 + 0 ];
	// end inline asm
	mov.b32 	%f9, %r37;
	mov.b32 	%f10, %r38;
	mov.b32 	%f11, %r39;
	mov.b32 	%f12, %r40;
	// begin inline asm
	mov.u32 %r41, 0x0;
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	@%p45 ld.global.v4.b32 { %r41, %r42, %r43, %r44 }, [ %rd141 + 0 ];
	// end inline asm
	mov.b32 	%f13, %r41;
	mov.b32 	%f14, %r42;
	mov.b32 	%f15, %r43;
	mov.b32 	%f16, %r44;
	.loc	1 47 19
	add.f32 	%f17, %f8, %f9;
	add.f32 	%f18, %f7, %f10;
	add.f32 	%f19, %f6, %f11;
	add.f32 	%f20, %f5, %f12;
	add.f32 	%f21, %f4, %f13;
	add.f32 	%f22, %f3, %f14;
	add.f32 	%f23, %f2, %f15;
	add.f32 	%f24, %f1, %f16;
	.loc	1 50 35
	shr.u64 	%rd156, %rd53, 52;
	and.b64  	%rd157, %rd156, 2048;
	add.s64 	%rd158, %rd157, %rd53;
	shr.u64 	%rd159, %rd61, 52;
	and.b64  	%rd160, %rd159, 2048;
	add.s64 	%rd161, %rd160, %rd61;
	.loc	1 52 31
	shl.b64 	%rd162, %rd158, 16;
	add.s64 	%rd163, %rd17, %rd162;
	add.s64 	%rd142, %rd163, %rd152;
	shl.b64 	%rd164, %rd161, 16;
	add.s64 	%rd165, %rd17, %rd164;
	add.s64 	%rd143, %rd165, %rd155;
	.loc	1 52 52
	// begin inline asm
	mov.u32 %r45, 0x0;
	mov.u32 %r46, 0x0;
	mov.u32 %r47, 0x0;
	mov.u32 %r48, 0x0;
	@%p45 ld.global.v4.b32 { %r45, %r46, %r47, %r48 }, [ %rd142 + 0 ];
	// end inline asm
	mov.b32 	%f25, %r45;
	mov.b32 	%f26, %r46;
	mov.b32 	%f27, %r47;
	mov.b32 	%f28, %r48;
	// begin inline asm
	mov.u32 %r49, 0x0;
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	mov.u32 %r52, 0x0;
	@%p45 ld.global.v4.b32 { %r49, %r50, %r51, %r52 }, [ %rd143 + 0 ];
	// end inline asm
	mov.b32 	%f29, %r49;
	mov.b32 	%f30, %r50;
	mov.b32 	%f31, %r51;
	mov.b32 	%f32, %r52;
	.loc	1 53 20
	add.f32 	%f33, %f17, %f25;
	add.f32 	%f34, %f18, %f26;
	add.f32 	%f35, %f19, %f27;
	add.f32 	%f36, %f20, %f28;
	add.f32 	%f37, %f21, %f29;
	add.f32 	%f38, %f22, %f30;
	add.f32 	%f39, %f23, %f31;
	add.f32 	%f40, %f24, %f32;
	.loc	1 56 35
	shr.u64 	%rd166, %rd69, 52;
	and.b64  	%rd167, %rd166, 2048;
	add.s64 	%rd168, %rd167, %rd69;
	shr.u64 	%rd169, %rd77, 52;
	and.b64  	%rd170, %rd169, 2048;
	add.s64 	%rd171, %rd170, %rd77;
	.loc	1 58 31
	shl.b64 	%rd172, %rd168, 16;
	add.s64 	%rd173, %rd18, %rd172;
	add.s64 	%rd144, %rd173, %rd152;
	shl.b64 	%rd174, %rd171, 16;
	add.s64 	%rd175, %rd18, %rd174;
	add.s64 	%rd145, %rd175, %rd155;
	.loc	1 58 52
	// begin inline asm
	mov.u32 %r53, 0x0;
	mov.u32 %r54, 0x0;
	mov.u32 %r55, 0x0;
	mov.u32 %r56, 0x0;
	@%p45 ld.global.v4.b32 { %r53, %r54, %r55, %r56 }, [ %rd144 + 0 ];
	// end inline asm
	mov.b32 	%f41, %r53;
	mov.b32 	%f42, %r54;
	mov.b32 	%f43, %r55;
	mov.b32 	%f44, %r56;
	// begin inline asm
	mov.u32 %r57, 0x0;
	mov.u32 %r58, 0x0;
	mov.u32 %r59, 0x0;
	mov.u32 %r60, 0x0;
	@%p45 ld.global.v4.b32 { %r57, %r58, %r59, %r60 }, [ %rd145 + 0 ];
	// end inline asm
	mov.b32 	%f45, %r57;
	mov.b32 	%f46, %r58;
	mov.b32 	%f47, %r59;
	mov.b32 	%f48, %r60;
	.loc	1 59 20
	add.f32 	%f49, %f33, %f41;
	add.f32 	%f50, %f34, %f42;
	add.f32 	%f51, %f35, %f43;
	add.f32 	%f52, %f36, %f44;
	add.f32 	%f53, %f37, %f45;
	add.f32 	%f54, %f38, %f46;
	add.f32 	%f55, %f39, %f47;
	add.f32 	%f56, %f40, %f48;
	.loc	1 62 35
	shr.u64 	%rd176, %rd85, 52;
	and.b64  	%rd177, %rd176, 2048;
	add.s64 	%rd178, %rd177, %rd85;
	shr.u64 	%rd179, %rd93, 52;
	and.b64  	%rd180, %rd179, 2048;
	add.s64 	%rd181, %rd180, %rd93;
	.loc	1 64 31
	shl.b64 	%rd182, %rd178, 16;
	add.s64 	%rd183, %rd19, %rd182;
	add.s64 	%rd146, %rd183, %rd152;
	shl.b64 	%rd184, %rd181, 16;
	add.s64 	%rd185, %rd19, %rd184;
	add.s64 	%rd147, %rd185, %rd155;
	.loc	1 64 52
	// begin inline asm
	mov.u32 %r61, 0x0;
	mov.u32 %r62, 0x0;
	mov.u32 %r63, 0x0;
	mov.u32 %r64, 0x0;
	@%p45 ld.global.v4.b32 { %r61, %r62, %r63, %r64 }, [ %rd146 + 0 ];
	// end inline asm
	mov.b32 	%f57, %r61;
	mov.b32 	%f58, %r62;
	mov.b32 	%f59, %r63;
	mov.b32 	%f60, %r64;
	// begin inline asm
	mov.u32 %r65, 0x0;
	mov.u32 %r66, 0x0;
	mov.u32 %r67, 0x0;
	mov.u32 %r68, 0x0;
	@%p45 ld.global.v4.b32 { %r65, %r66, %r67, %r68 }, [ %rd147 + 0 ];
	// end inline asm
	mov.b32 	%f61, %r65;
	mov.b32 	%f62, %r66;
	mov.b32 	%f63, %r67;
	mov.b32 	%f64, %r68;
	.loc	1 65 20
	add.f32 	%f65, %f49, %f57;
	add.f32 	%f66, %f50, %f58;
	add.f32 	%f67, %f51, %f59;
	add.f32 	%f68, %f52, %f60;
	add.f32 	%f69, %f53, %f61;
	add.f32 	%f70, %f54, %f62;
	add.f32 	%f71, %f55, %f63;
	add.f32 	%f72, %f56, %f64;
	.loc	1 66 25
	mul.wide.s32 	%rd186, %r17, 4;
	add.s64 	%rd148, %rd20, %rd186;
	add.s64 	%rd149, %rd148, 2048;
	.loc	1 66 37
	mov.b32 	%r69, %f65;
	mov.b32 	%r70, %f66;
	mov.b32 	%r71, %f67;
	mov.b32 	%r72, %f68;
	// begin inline asm
	@%p45 st.global.v4.b32 [ %rd148 + 0 ], { %r69, %r70, %r71, %r72 };
	// end inline asm
	mov.b32 	%r73, %f69;
	mov.b32 	%r74, %f70;
	mov.b32 	%r75, %f71;
	mov.b32 	%r76, %f72;
	// begin inline asm
	@%p45 st.global.v4.b32 [ %rd149 + 0 ], { %r73, %r74, %r75, %r76 };
	// end inline asm
	.loc	1 66 4
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/tmp/torchinductor_paperspace/xo/cxoz2xnzptl3etvbup4s5cgix6vrneags6xxeyook4kwm6lsmvxu.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 126
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 120
.b8 111
.b8 122
.b8 50
.b8 120
.b8 110
.b8 122
.b8 112
.b8 116
.b8 108
.b8 51
.b8 101
.b8 116
.b8 118
.b8 98
.b8 117
.b8 112
.b8 52
.b8 115
.b8 53
.b8 99
.b8 103
.b8 105
.b8 120
.b8 54
.b8 118
.b8 114
.b8 110
.b8 101
.b8 97
.b8 103
.b8 115
.b8 54
.b8 120
.b8 120
.b8 101
.b8 121
.b8 111
.b8 111
.b8 107
.b8 52
.b8 107
.b8 119
.b8 109
.b8 54
.b8 108
.b8 115
.b8 109
.b8 118
.b8 120
.b8 117
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 116
.b8 109
.b8 112
.b8 47
.b8 116
.b8 111
.b8 114
.b8 99
.b8 104
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 112
.b8 97
.b8 112
.b8 101
.b8 114
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 120
.b8 111
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
