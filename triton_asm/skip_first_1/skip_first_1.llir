; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_3 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_3 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_3 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp26 < 2048"
@assertFunc_2 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_2 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_2 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp20 < 2048"
@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp14 < 2048"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp8 < 2048"

declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !11 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %14 = shl i32 %13, 10, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = shl i32 %15, 2, !dbg !14
  %17 = and i32 %16, 508, !dbg !14
  %18 = or disjoint i32 %14, %17, !dbg !15
  %19 = or disjoint i32 %18, 512, !dbg !15
  %.frozen = freeze i32 %18
  %20 = sdiv i32 %.frozen, 16384, !dbg !16
  %.frozen4 = freeze i32 %19
  %21 = sdiv i32 %.frozen4, 16384, !dbg !16
  %22 = mul i32 %20, 16384
  %.decomposed = sub i32 %.frozen, %22
  %23 = mul i32 %21, 16384
  %.decomposed5 = sub i32 %.frozen4, %23
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %21 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %36 = getelementptr i64, ptr addrspace(1) %2, i64 %24, !dbg !19
  %37 = getelementptr i64, ptr addrspace(1) %2, i64 %26, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %46 = getelementptr i64, ptr addrspace(1) %4, i64 %24, !dbg !21
  %47 = getelementptr i64, ptr addrspace(1) %4, i64 %26, !dbg !21
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %56 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !23
  %57 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !23
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %66 = getelementptr i64, ptr addrspace(1) %8, i64 %24, !dbg !25
  %67 = getelementptr i64, ptr addrspace(1) %8, i64 %26, !dbg !25
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %76 = lshr i64 %28, 52, !dbg !27
  %77 = and i64 %76, 2048, !dbg !27
  %78 = add i64 %77, %28, !dbg !27
  %79 = lshr i64 %32, 52, !dbg !27
  %80 = and i64 %79, 2048, !dbg !27
  %81 = add i64 %80, %32, !dbg !27
  %82 = shl i64 %78, 14, !dbg !28
  %83 = shl i64 %81, 14, !dbg !28
  %84 = sext i32 %.decomposed to i64, !dbg !29
  %85 = sext i32 %.decomposed5 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %84, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %85, !dbg !30
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !31
  %92 = insertelement <2 x i64> poison, i64 %42, i64 0, !dbg !32
  %93 = insertelement <2 x i64> %92, i64 %38, i64 1, !dbg !32
  %94 = lshr <2 x i64> %93, <i64 52, i64 52>, !dbg !32
  %95 = and <2 x i64> %94, <i64 2048, i64 2048>, !dbg !32
  %96 = add <2 x i64> %95, %93, !dbg !32
  %97 = extractelement <2 x i64> %96, i64 0, !dbg !33
  %98 = extractelement <2 x i64> %96, i64 1, !dbg !33
  %99 = or i64 %97, %98, !dbg !33
  %.not = icmp ult i64 %99, 2048, !dbg !33
  br i1 %.not, label %101, label %100, !dbg !33

100:                                              ; preds = %12
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 843, ptr nonnull @assertFunc_0, i64 1), !dbg !33
  br label %101, !dbg !33

101:                                              ; preds = %100, %12
  %102 = shl i64 %98, 14, !dbg !34
  %103 = shl i64 %97, 14, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !35
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %84, !dbg !35
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %85, !dbg !35
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !36
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !36
  %110 = insertelement <2 x i64> poison, i64 %52, i64 0, !dbg !37
  %111 = insertelement <2 x i64> %110, i64 %48, i64 1, !dbg !37
  %112 = lshr <2 x i64> %111, <i64 52, i64 52>, !dbg !37
  %113 = and <2 x i64> %112, <i64 2048, i64 2048>, !dbg !37
  %114 = add <2 x i64> %113, %111, !dbg !37
  %115 = extractelement <2 x i64> %114, i64 0, !dbg !38
  %116 = extractelement <2 x i64> %114, i64 1, !dbg !38
  %117 = or i64 %115, %116, !dbg !38
  %.not1 = icmp ult i64 %117, 2048, !dbg !38
  br i1 %.not1, label %119, label %118, !dbg !38

118:                                              ; preds = %101
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 843, ptr nonnull @assertFunc_1, i64 1), !dbg !38
  br label %119, !dbg !38

119:                                              ; preds = %118, %101
  %120 = shl i64 %116, 14, !dbg !39
  %121 = shl i64 %115, 14, !dbg !39
  %122 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !40
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %84, !dbg !40
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !40
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %85, !dbg !40
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !41
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !41
  %128 = insertelement <2 x i64> poison, i64 %62, i64 0, !dbg !42
  %129 = insertelement <2 x i64> %128, i64 %58, i64 1, !dbg !42
  %130 = lshr <2 x i64> %129, <i64 52, i64 52>, !dbg !42
  %131 = and <2 x i64> %130, <i64 2048, i64 2048>, !dbg !42
  %132 = add <2 x i64> %131, %129, !dbg !42
  %133 = extractelement <2 x i64> %132, i64 0, !dbg !43
  %134 = extractelement <2 x i64> %132, i64 1, !dbg !43
  %135 = or i64 %133, %134, !dbg !43
  %.not2 = icmp ult i64 %135, 2048, !dbg !43
  br i1 %.not2, label %137, label %136, !dbg !43

136:                                              ; preds = %119
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 843, ptr nonnull @assertFunc_2, i64 1), !dbg !43
  br label %137, !dbg !43

137:                                              ; preds = %136, %119
  %138 = shl i64 %134, 14, !dbg !44
  %139 = shl i64 %133, 14, !dbg !44
  %140 = getelementptr float, ptr addrspace(1) %7, i64 %138, !dbg !45
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %84, !dbg !45
  %142 = getelementptr float, ptr addrspace(1) %7, i64 %139, !dbg !45
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %85, !dbg !45
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !46
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !46
  %146 = insertelement <2 x i64> poison, i64 %72, i64 0, !dbg !47
  %147 = insertelement <2 x i64> %146, i64 %68, i64 1, !dbg !47
  %148 = lshr <2 x i64> %147, <i64 52, i64 52>, !dbg !47
  %149 = and <2 x i64> %148, <i64 2048, i64 2048>, !dbg !47
  %150 = add <2 x i64> %149, %147, !dbg !47
  %151 = extractelement <2 x i64> %150, i64 0, !dbg !48
  %152 = extractelement <2 x i64> %150, i64 1, !dbg !48
  %153 = or i64 %151, %152, !dbg !48
  %.not3 = icmp ult i64 %153, 2048, !dbg !48
  br i1 %.not3, label %155, label %154, !dbg !48

154:                                              ; preds = %137
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 843, ptr nonnull @assertFunc_3, i64 1), !dbg !48
  br label %155, !dbg !48

155:                                              ; preds = %154, %137
  %156 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !31
  %157 = bitcast i32 %156 to float, !dbg !31
  %158 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !36
  %159 = bitcast i32 %158 to float, !dbg !36
  %160 = fadd float %157, %159, !dbg !49
  %161 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !41
  %162 = bitcast i32 %161 to float, !dbg !41
  %163 = fadd float %160, %162, !dbg !50
  %164 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !46
  %165 = bitcast i32 %164 to float, !dbg !46
  %166 = fadd float %163, %165, !dbg !51
  %167 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !31
  %168 = bitcast i32 %167 to float, !dbg !31
  %169 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !36
  %170 = bitcast i32 %169 to float, !dbg !36
  %171 = fadd float %168, %170, !dbg !49
  %172 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !41
  %173 = bitcast i32 %172 to float, !dbg !41
  %174 = fadd float %171, %173, !dbg !50
  %175 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !46
  %176 = bitcast i32 %175 to float, !dbg !46
  %177 = fadd float %174, %176, !dbg !51
  %178 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !31
  %179 = bitcast i32 %178 to float, !dbg !31
  %180 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !36
  %181 = bitcast i32 %180 to float, !dbg !36
  %182 = fadd float %179, %181, !dbg !49
  %183 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = fadd float %182, %184, !dbg !50
  %186 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = fadd float %185, %187, !dbg !51
  %189 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !36
  %192 = bitcast i32 %191 to float, !dbg !36
  %193 = fadd float %190, %192, !dbg !49
  %194 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !41
  %195 = bitcast i32 %194 to float, !dbg !41
  %196 = fadd float %193, %195, !dbg !50
  %197 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !46
  %198 = bitcast i32 %197 to float, !dbg !46
  %199 = fadd float %196, %198, !dbg !51
  %200 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !31
  %201 = bitcast i32 %200 to float, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !36
  %203 = bitcast i32 %202 to float, !dbg !36
  %204 = fadd float %201, %203, !dbg !49
  %205 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !41
  %206 = bitcast i32 %205 to float, !dbg !41
  %207 = fadd float %204, %206, !dbg !50
  %208 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !46
  %209 = bitcast i32 %208 to float, !dbg !46
  %210 = fadd float %207, %209, !dbg !51
  %211 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !31
  %212 = bitcast i32 %211 to float, !dbg !31
  %213 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !36
  %214 = bitcast i32 %213 to float, !dbg !36
  %215 = fadd float %212, %214, !dbg !49
  %216 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !41
  %217 = bitcast i32 %216 to float, !dbg !41
  %218 = fadd float %215, %217, !dbg !50
  %219 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !46
  %220 = bitcast i32 %219 to float, !dbg !46
  %221 = fadd float %218, %220, !dbg !51
  %222 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !36
  %225 = bitcast i32 %224 to float, !dbg !36
  %226 = fadd float %223, %225, !dbg !49
  %227 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !41
  %228 = bitcast i32 %227 to float, !dbg !41
  %229 = fadd float %226, %228, !dbg !50
  %230 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !46
  %231 = bitcast i32 %230 to float, !dbg !46
  %232 = fadd float %229, %231, !dbg !51
  %233 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !31
  %234 = bitcast i32 %233 to float, !dbg !31
  %235 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !36
  %236 = bitcast i32 %235 to float, !dbg !36
  %237 = fadd float %234, %236, !dbg !49
  %238 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !41
  %239 = bitcast i32 %238 to float, !dbg !41
  %240 = fadd float %237, %239, !dbg !50
  %241 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !46
  %242 = bitcast i32 %241 to float, !dbg !46
  %243 = fadd float %240, %242, !dbg !51
  %244 = shl i64 %152, 14, !dbg !52
  %245 = shl i64 %151, 14, !dbg !52
  %246 = getelementptr float, ptr addrspace(1) %9, i64 %244, !dbg !53
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %84, !dbg !53
  %248 = getelementptr float, ptr addrspace(1) %9, i64 %245, !dbg !53
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %85, !dbg !53
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 true) #1, !dbg !54
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !54
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !54
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !54
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !54
  %255 = bitcast i32 %251 to float, !dbg !54
  %256 = bitcast i32 %252 to float, !dbg !54
  %257 = bitcast i32 %253 to float, !dbg !54
  %258 = bitcast i32 %254 to float, !dbg !54
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 true) #1, !dbg !54
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !54
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !54
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !54
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !54
  %264 = bitcast i32 %260 to float, !dbg !54
  %265 = bitcast i32 %261 to float, !dbg !54
  %266 = bitcast i32 %262 to float, !dbg !54
  %267 = bitcast i32 %263 to float, !dbg !54
  %268 = fadd float %243, %255, !dbg !55
  %269 = fadd float %232, %256, !dbg !55
  %270 = fadd float %221, %257, !dbg !55
  %271 = fadd float %210, %258, !dbg !55
  %272 = fadd float %199, %264, !dbg !55
  %273 = fadd float %188, %265, !dbg !55
  %274 = fadd float %177, %266, !dbg !55
  %275 = fadd float %166, %267, !dbg !55
  %276 = sext i32 %18 to i64, !dbg !56
  %277 = getelementptr float, ptr addrspace(1) %10, i64 %276, !dbg !56
  %278 = sext i32 %19 to i64, !dbg !56
  %279 = getelementptr float, ptr addrspace(1) %10, i64 %278, !dbg !56
  %280 = bitcast float %268 to i32, !dbg !57
  %281 = bitcast float %269 to i32, !dbg !57
  %282 = bitcast float %270 to i32, !dbg !57
  %283 = bitcast float %271 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %277, i1 true) #1, !dbg !57
  %284 = bitcast float %272 to i32, !dbg !57
  %285 = bitcast float %273 to i32, !dbg !57
  %286 = bitcast float %274 to i32, !dbg !57
  %287 = bitcast float %275 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %279, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3xydahmfkzig3sau62unuoitwb2phxp4w6z2mt4nvbagxqyybse.py", directory: "/tmp/torchinductor_paperspace/3x")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 24, type: !9, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 26, column: 28, scope: !11)
!13 = !DILocation(line: 26, column: 33, scope: !11)
!14 = !DILocation(line: 27, column: 36, scope: !11)
!15 = !DILocation(line: 27, column: 23, scope: !11)
!16 = !DILocation(line: 29, column: 20, scope: !11)
!17 = !DILocation(line: 32, column: 30, scope: !11)
!18 = !DILocation(line: 32, column: 35, scope: !11)
!19 = !DILocation(line: 33, column: 30, scope: !11)
!20 = !DILocation(line: 33, column: 35, scope: !11)
!21 = !DILocation(line: 34, column: 31, scope: !11)
!22 = !DILocation(line: 34, column: 36, scope: !11)
!23 = !DILocation(line: 35, column: 31, scope: !11)
!24 = !DILocation(line: 35, column: 36, scope: !11)
!25 = !DILocation(line: 36, column: 31, scope: !11)
!26 = !DILocation(line: 36, column: 36, scope: !11)
!27 = !DILocation(line: 39, column: 32, scope: !11)
!28 = !DILocation(line: 41, column: 42, scope: !11)
!29 = !DILocation(line: 41, column: 36, scope: !11)
!30 = !DILocation(line: 41, column: 30, scope: !11)
!31 = !DILocation(line: 41, column: 50, scope: !11)
!32 = !DILocation(line: 44, column: 32, scope: !11)
!33 = !DILocation(line: 45, column: 50, scope: !11)
!34 = !DILocation(line: 46, column: 42, scope: !11)
!35 = !DILocation(line: 46, column: 30, scope: !11)
!36 = !DILocation(line: 46, column: 50, scope: !11)
!37 = !DILocation(line: 50, column: 35, scope: !11)
!38 = !DILocation(line: 51, column: 52, scope: !11)
!39 = !DILocation(line: 52, column: 43, scope: !11)
!40 = !DILocation(line: 52, column: 31, scope: !11)
!41 = !DILocation(line: 52, column: 52, scope: !11)
!42 = !DILocation(line: 56, column: 35, scope: !11)
!43 = !DILocation(line: 57, column: 52, scope: !11)
!44 = !DILocation(line: 58, column: 43, scope: !11)
!45 = !DILocation(line: 58, column: 31, scope: !11)
!46 = !DILocation(line: 58, column: 52, scope: !11)
!47 = !DILocation(line: 62, column: 35, scope: !11)
!48 = !DILocation(line: 63, column: 52, scope: !11)
!49 = !DILocation(line: 47, column: 19, scope: !11)
!50 = !DILocation(line: 53, column: 20, scope: !11)
!51 = !DILocation(line: 59, column: 20, scope: !11)
!52 = !DILocation(line: 64, column: 43, scope: !11)
!53 = !DILocation(line: 64, column: 31, scope: !11)
!54 = !DILocation(line: 64, column: 52, scope: !11)
!55 = !DILocation(line: 65, column: 20, scope: !11)
!56 = !DILocation(line: 66, column: 25, scope: !11)
!57 = !DILocation(line: 66, column: 37, scope: !11)
!58 = !DILocation(line: 66, column: 4, scope: !11)
