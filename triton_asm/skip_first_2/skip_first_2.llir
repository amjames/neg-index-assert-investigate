; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_2 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_2 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_2 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp26 < 2048"
@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp20 < 2048"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp14 < 2048"

declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !11 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %14 = shl i32 %13, 10, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = shl i32 %15, 2, !dbg !14
  %17 = and i32 %16, 508, !dbg !14
  %18 = or disjoint i32 %14, %17, !dbg !15
  %19 = or disjoint i32 %18, 512, !dbg !15
  %.frozen = freeze i32 %18
  %20 = sdiv i32 %.frozen, 16384, !dbg !16
  %.frozen3 = freeze i32 %19
  %21 = sdiv i32 %.frozen3, 16384, !dbg !16
  %22 = mul i32 %20, 16384
  %.decomposed = sub i32 %.frozen, %22
  %23 = mul i32 %21, 16384
  %.decomposed4 = sub i32 %.frozen3, %23
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %21 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %36 = getelementptr i64, ptr addrspace(1) %2, i64 %24, !dbg !19
  %37 = getelementptr i64, ptr addrspace(1) %2, i64 %26, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %46 = getelementptr i64, ptr addrspace(1) %4, i64 %24, !dbg !21
  %47 = getelementptr i64, ptr addrspace(1) %4, i64 %26, !dbg !21
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %56 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !23
  %57 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !23
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %66 = getelementptr i64, ptr addrspace(1) %8, i64 %24, !dbg !25
  %67 = getelementptr i64, ptr addrspace(1) %8, i64 %26, !dbg !25
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %76 = lshr i64 %28, 52, !dbg !27
  %77 = and i64 %76, 2048, !dbg !27
  %78 = add i64 %77, %28, !dbg !27
  %79 = lshr i64 %32, 52, !dbg !27
  %80 = and i64 %79, 2048, !dbg !27
  %81 = add i64 %80, %32, !dbg !27
  %82 = shl i64 %78, 14, !dbg !28
  %83 = shl i64 %81, 14, !dbg !28
  %84 = sext i32 %.decomposed to i64, !dbg !29
  %85 = sext i32 %.decomposed4 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %84, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %85, !dbg !30
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !31
  %92 = lshr i64 %38, 52, !dbg !32
  %93 = and i64 %92, 2048, !dbg !32
  %94 = add i64 %93, %38, !dbg !32
  %95 = lshr i64 %42, 52, !dbg !32
  %96 = and i64 %95, 2048, !dbg !32
  %97 = add i64 %96, %42, !dbg !32
  %98 = shl i64 %94, 14, !dbg !33
  %99 = shl i64 %97, 14, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %84, !dbg !34
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %85, !dbg !34
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !35
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !35
  %106 = insertelement <2 x i64> poison, i64 %52, i64 0, !dbg !36
  %107 = insertelement <2 x i64> %106, i64 %48, i64 1, !dbg !36
  %108 = lshr <2 x i64> %107, <i64 52, i64 52>, !dbg !36
  %109 = and <2 x i64> %108, <i64 2048, i64 2048>, !dbg !36
  %110 = add <2 x i64> %109, %107, !dbg !36
  %111 = extractelement <2 x i64> %110, i64 0, !dbg !37
  %112 = extractelement <2 x i64> %110, i64 1, !dbg !37
  %113 = or i64 %111, %112, !dbg !37
  %.not = icmp ult i64 %113, 2048, !dbg !37
  br i1 %.not, label %115, label %114, !dbg !37

114:                                              ; preds = %12
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 843, ptr nonnull @assertFunc_0, i64 1), !dbg !37
  br label %115, !dbg !37

115:                                              ; preds = %114, %12
  %116 = shl i64 %112, 14, !dbg !38
  %117 = shl i64 %111, 14, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !39
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %84, !dbg !39
  %120 = getelementptr float, ptr addrspace(1) %5, i64 %117, !dbg !39
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %85, !dbg !39
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !40
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !40
  %124 = insertelement <2 x i64> poison, i64 %62, i64 0, !dbg !41
  %125 = insertelement <2 x i64> %124, i64 %58, i64 1, !dbg !41
  %126 = lshr <2 x i64> %125, <i64 52, i64 52>, !dbg !41
  %127 = and <2 x i64> %126, <i64 2048, i64 2048>, !dbg !41
  %128 = add <2 x i64> %127, %125, !dbg !41
  %129 = extractelement <2 x i64> %128, i64 0, !dbg !42
  %130 = extractelement <2 x i64> %128, i64 1, !dbg !42
  %131 = or i64 %129, %130, !dbg !42
  %.not1 = icmp ult i64 %131, 2048, !dbg !42
  br i1 %.not1, label %133, label %132, !dbg !42

132:                                              ; preds = %115
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 843, ptr nonnull @assertFunc_1, i64 1), !dbg !42
  br label %133, !dbg !42

133:                                              ; preds = %132, %115
  %134 = shl i64 %130, 14, !dbg !43
  %135 = shl i64 %129, 14, !dbg !43
  %136 = getelementptr float, ptr addrspace(1) %7, i64 %134, !dbg !44
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %84, !dbg !44
  %138 = getelementptr float, ptr addrspace(1) %7, i64 %135, !dbg !44
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %85, !dbg !44
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 true) #1, !dbg !45
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !45
  %142 = insertelement <2 x i64> poison, i64 %72, i64 0, !dbg !46
  %143 = insertelement <2 x i64> %142, i64 %68, i64 1, !dbg !46
  %144 = lshr <2 x i64> %143, <i64 52, i64 52>, !dbg !46
  %145 = and <2 x i64> %144, <i64 2048, i64 2048>, !dbg !46
  %146 = add <2 x i64> %145, %143, !dbg !46
  %147 = extractelement <2 x i64> %146, i64 0, !dbg !47
  %148 = extractelement <2 x i64> %146, i64 1, !dbg !47
  %149 = or i64 %147, %148, !dbg !47
  %.not2 = icmp ult i64 %149, 2048, !dbg !47
  br i1 %.not2, label %151, label %150, !dbg !47

150:                                              ; preds = %133
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 843, ptr nonnull @assertFunc_2, i64 1), !dbg !47
  br label %151, !dbg !47

151:                                              ; preds = %150, %133
  %152 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !31
  %153 = bitcast i32 %152 to float, !dbg !31
  %154 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !35
  %155 = bitcast i32 %154 to float, !dbg !35
  %156 = fadd float %153, %155, !dbg !48
  %157 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !40
  %158 = bitcast i32 %157 to float, !dbg !40
  %159 = fadd float %156, %158, !dbg !49
  %160 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !45
  %161 = bitcast i32 %160 to float, !dbg !45
  %162 = fadd float %159, %161, !dbg !50
  %163 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !31
  %164 = bitcast i32 %163 to float, !dbg !31
  %165 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !35
  %166 = bitcast i32 %165 to float, !dbg !35
  %167 = fadd float %164, %166, !dbg !48
  %168 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !40
  %169 = bitcast i32 %168 to float, !dbg !40
  %170 = fadd float %167, %169, !dbg !49
  %171 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !45
  %172 = bitcast i32 %171 to float, !dbg !45
  %173 = fadd float %170, %172, !dbg !50
  %174 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !31
  %175 = bitcast i32 %174 to float, !dbg !31
  %176 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !35
  %177 = bitcast i32 %176 to float, !dbg !35
  %178 = fadd float %175, %177, !dbg !48
  %179 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !40
  %180 = bitcast i32 %179 to float, !dbg !40
  %181 = fadd float %178, %180, !dbg !49
  %182 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !45
  %183 = bitcast i32 %182 to float, !dbg !45
  %184 = fadd float %181, %183, !dbg !50
  %185 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !31
  %186 = bitcast i32 %185 to float, !dbg !31
  %187 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !35
  %188 = bitcast i32 %187 to float, !dbg !35
  %189 = fadd float %186, %188, !dbg !48
  %190 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !40
  %191 = bitcast i32 %190 to float, !dbg !40
  %192 = fadd float %189, %191, !dbg !49
  %193 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !45
  %194 = bitcast i32 %193 to float, !dbg !45
  %195 = fadd float %192, %194, !dbg !50
  %196 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !31
  %197 = bitcast i32 %196 to float, !dbg !31
  %198 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = fadd float %197, %199, !dbg !48
  %201 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !40
  %202 = bitcast i32 %201 to float, !dbg !40
  %203 = fadd float %200, %202, !dbg !49
  %204 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !45
  %205 = bitcast i32 %204 to float, !dbg !45
  %206 = fadd float %203, %205, !dbg !50
  %207 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !31
  %208 = bitcast i32 %207 to float, !dbg !31
  %209 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !35
  %210 = bitcast i32 %209 to float, !dbg !35
  %211 = fadd float %208, %210, !dbg !48
  %212 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !40
  %213 = bitcast i32 %212 to float, !dbg !40
  %214 = fadd float %211, %213, !dbg !49
  %215 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !45
  %216 = bitcast i32 %215 to float, !dbg !45
  %217 = fadd float %214, %216, !dbg !50
  %218 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !31
  %219 = bitcast i32 %218 to float, !dbg !31
  %220 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !35
  %221 = bitcast i32 %220 to float, !dbg !35
  %222 = fadd float %219, %221, !dbg !48
  %223 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !40
  %224 = bitcast i32 %223 to float, !dbg !40
  %225 = fadd float %222, %224, !dbg !49
  %226 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !45
  %227 = bitcast i32 %226 to float, !dbg !45
  %228 = fadd float %225, %227, !dbg !50
  %229 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !31
  %230 = bitcast i32 %229 to float, !dbg !31
  %231 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !35
  %232 = bitcast i32 %231 to float, !dbg !35
  %233 = fadd float %230, %232, !dbg !48
  %234 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !40
  %235 = bitcast i32 %234 to float, !dbg !40
  %236 = fadd float %233, %235, !dbg !49
  %237 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !45
  %238 = bitcast i32 %237 to float, !dbg !45
  %239 = fadd float %236, %238, !dbg !50
  %240 = shl i64 %148, 14, !dbg !51
  %241 = shl i64 %147, 14, !dbg !51
  %242 = getelementptr float, ptr addrspace(1) %9, i64 %240, !dbg !52
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %84, !dbg !52
  %244 = getelementptr float, ptr addrspace(1) %9, i64 %241, !dbg !52
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %85, !dbg !52
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 true) #1, !dbg !53
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !53
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !53
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !53
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !53
  %251 = bitcast i32 %247 to float, !dbg !53
  %252 = bitcast i32 %248 to float, !dbg !53
  %253 = bitcast i32 %249 to float, !dbg !53
  %254 = bitcast i32 %250 to float, !dbg !53
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %245, i1 true) #1, !dbg !53
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !53
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !53
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !53
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !53
  %260 = bitcast i32 %256 to float, !dbg !53
  %261 = bitcast i32 %257 to float, !dbg !53
  %262 = bitcast i32 %258 to float, !dbg !53
  %263 = bitcast i32 %259 to float, !dbg !53
  %264 = fadd float %239, %251, !dbg !54
  %265 = fadd float %228, %252, !dbg !54
  %266 = fadd float %217, %253, !dbg !54
  %267 = fadd float %206, %254, !dbg !54
  %268 = fadd float %195, %260, !dbg !54
  %269 = fadd float %184, %261, !dbg !54
  %270 = fadd float %173, %262, !dbg !54
  %271 = fadd float %162, %263, !dbg !54
  %272 = sext i32 %18 to i64, !dbg !55
  %273 = getelementptr float, ptr addrspace(1) %10, i64 %272, !dbg !55
  %274 = sext i32 %19 to i64, !dbg !55
  %275 = getelementptr float, ptr addrspace(1) %10, i64 %274, !dbg !55
  %276 = bitcast float %264 to i32, !dbg !56
  %277 = bitcast float %265 to i32, !dbg !56
  %278 = bitcast float %266 to i32, !dbg !56
  %279 = bitcast float %267 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %277, i32 %278, i32 %279, ptr addrspace(1) %273, i1 true) #1, !dbg !56
  %280 = bitcast float %268 to i32, !dbg !56
  %281 = bitcast float %269 to i32, !dbg !56
  %282 = bitcast float %270 to i32, !dbg !56
  %283 = bitcast float %271 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %275, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chwhwwyrwlvkruhh42p4syjcguq2m7va2ix35lbgokupnhyeieze.py", directory: "/tmp/torchinductor_paperspace/hw")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 24, type: !9, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 26, column: 28, scope: !11)
!13 = !DILocation(line: 26, column: 33, scope: !11)
!14 = !DILocation(line: 27, column: 36, scope: !11)
!15 = !DILocation(line: 27, column: 23, scope: !11)
!16 = !DILocation(line: 29, column: 20, scope: !11)
!17 = !DILocation(line: 32, column: 30, scope: !11)
!18 = !DILocation(line: 32, column: 35, scope: !11)
!19 = !DILocation(line: 33, column: 30, scope: !11)
!20 = !DILocation(line: 33, column: 35, scope: !11)
!21 = !DILocation(line: 34, column: 31, scope: !11)
!22 = !DILocation(line: 34, column: 36, scope: !11)
!23 = !DILocation(line: 35, column: 31, scope: !11)
!24 = !DILocation(line: 35, column: 36, scope: !11)
!25 = !DILocation(line: 36, column: 31, scope: !11)
!26 = !DILocation(line: 36, column: 36, scope: !11)
!27 = !DILocation(line: 39, column: 32, scope: !11)
!28 = !DILocation(line: 41, column: 42, scope: !11)
!29 = !DILocation(line: 41, column: 36, scope: !11)
!30 = !DILocation(line: 41, column: 30, scope: !11)
!31 = !DILocation(line: 41, column: 50, scope: !11)
!32 = !DILocation(line: 44, column: 32, scope: !11)
!33 = !DILocation(line: 46, column: 42, scope: !11)
!34 = !DILocation(line: 46, column: 30, scope: !11)
!35 = !DILocation(line: 46, column: 50, scope: !11)
!36 = !DILocation(line: 50, column: 35, scope: !11)
!37 = !DILocation(line: 51, column: 52, scope: !11)
!38 = !DILocation(line: 52, column: 43, scope: !11)
!39 = !DILocation(line: 52, column: 31, scope: !11)
!40 = !DILocation(line: 52, column: 52, scope: !11)
!41 = !DILocation(line: 56, column: 35, scope: !11)
!42 = !DILocation(line: 57, column: 52, scope: !11)
!43 = !DILocation(line: 58, column: 43, scope: !11)
!44 = !DILocation(line: 58, column: 31, scope: !11)
!45 = !DILocation(line: 58, column: 52, scope: !11)
!46 = !DILocation(line: 62, column: 35, scope: !11)
!47 = !DILocation(line: 63, column: 52, scope: !11)
!48 = !DILocation(line: 47, column: 19, scope: !11)
!49 = !DILocation(line: 53, column: 20, scope: !11)
!50 = !DILocation(line: 59, column: 20, scope: !11)
!51 = !DILocation(line: 64, column: 43, scope: !11)
!52 = !DILocation(line: 64, column: 31, scope: !11)
!53 = !DILocation(line: 64, column: 52, scope: !11)
!54 = !DILocation(line: 65, column: 20, scope: !11)
!55 = !DILocation(line: 66, column: 25, scope: !11)
!56 = !DILocation(line: 66, column: 37, scope: !11)
!57 = !DILocation(line: 66, column: 4, scope: !11)
