; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@assertFunc_3 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_3 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_3 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp20 < 2048"
@assertFunc_2 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_2 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_2 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp14 < 2048"
@assertFunc_1 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_1 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp8 < 2048"
@assertFunc_0 = internal constant [25 x i8] c"_call_with_frames_removed"
@assertFile_0 = internal constant [38 x i8] c"<frozen importlib._bootstrap_external>"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp3 < 2048"

declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !11 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %14 = shl i32 %13, 10, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = shl i32 %15, 2, !dbg !14
  %17 = and i32 %16, 508, !dbg !14
  %18 = or disjoint i32 %14, %17, !dbg !15
  %19 = or disjoint i32 %18, 512, !dbg !15
  %.frozen = freeze i32 %18
  %20 = sdiv i32 %.frozen, 16384, !dbg !16
  %.frozen4 = freeze i32 %19
  %21 = sdiv i32 %.frozen4, 16384, !dbg !16
  %22 = mul i32 %20, 16384
  %.decomposed = sub i32 %.frozen, %22
  %23 = mul i32 %21, 16384
  %.decomposed5 = sub i32 %.frozen4, %23
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %21 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !18
  %36 = getelementptr i64, ptr addrspace(1) %2, i64 %24, !dbg !19
  %37 = getelementptr i64, ptr addrspace(1) %2, i64 %26, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %46 = getelementptr i64, ptr addrspace(1) %4, i64 %24, !dbg !21
  %47 = getelementptr i64, ptr addrspace(1) %4, i64 %26, !dbg !21
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %56 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !23
  %57 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !23
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !24
  %66 = getelementptr i64, ptr addrspace(1) %8, i64 %24, !dbg !25
  %67 = getelementptr i64, ptr addrspace(1) %8, i64 %26, !dbg !25
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !26
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !26
  %76 = insertelement <2 x i64> poison, i64 %32, i64 0, !dbg !27
  %77 = insertelement <2 x i64> %76, i64 %28, i64 1, !dbg !27
  %78 = lshr <2 x i64> %77, <i64 52, i64 52>, !dbg !27
  %79 = and <2 x i64> %78, <i64 2048, i64 2048>, !dbg !27
  %80 = add <2 x i64> %79, %77, !dbg !27
  %81 = extractelement <2 x i64> %80, i64 0, !dbg !28
  %82 = extractelement <2 x i64> %80, i64 1, !dbg !28
  %83 = or i64 %81, %82, !dbg !28
  %.not = icmp ult i64 %83, 2048, !dbg !28
  br i1 %.not, label %85, label %84, !dbg !28

84:                                               ; preds = %12
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 843, ptr nonnull @assertFunc_0, i64 1), !dbg !28
  br label %85, !dbg !28

85:                                               ; preds = %84, %12
  %86 = shl i64 %82, 14, !dbg !29
  %87 = shl i64 %81, 14, !dbg !29
  %88 = sext i32 %.decomposed to i64, !dbg !30
  %89 = sext i32 %.decomposed5 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !31
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %88, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !31
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %89, !dbg !31
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !32
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !32
  %96 = insertelement <2 x i64> poison, i64 %42, i64 0, !dbg !33
  %97 = insertelement <2 x i64> %96, i64 %38, i64 1, !dbg !33
  %98 = lshr <2 x i64> %97, <i64 52, i64 52>, !dbg !33
  %99 = and <2 x i64> %98, <i64 2048, i64 2048>, !dbg !33
  %100 = add <2 x i64> %99, %97, !dbg !33
  %101 = extractelement <2 x i64> %100, i64 0, !dbg !34
  %102 = extractelement <2 x i64> %100, i64 1, !dbg !34
  %103 = or i64 %101, %102, !dbg !34
  %.not1 = icmp ult i64 %103, 2048, !dbg !34
  br i1 %.not1, label %105, label %104, !dbg !34

104:                                              ; preds = %85
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 843, ptr nonnull @assertFunc_1, i64 1), !dbg !34
  br label %105, !dbg !34

105:                                              ; preds = %104, %85
  %106 = shl i64 %102, 14, !dbg !35
  %107 = shl i64 %101, 14, !dbg !35
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !36
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %88, !dbg !36
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !36
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %89, !dbg !36
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !37
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !37
  %114 = insertelement <2 x i64> poison, i64 %52, i64 0, !dbg !38
  %115 = insertelement <2 x i64> %114, i64 %48, i64 1, !dbg !38
  %116 = lshr <2 x i64> %115, <i64 52, i64 52>, !dbg !38
  %117 = and <2 x i64> %116, <i64 2048, i64 2048>, !dbg !38
  %118 = add <2 x i64> %117, %115, !dbg !38
  %119 = extractelement <2 x i64> %118, i64 0, !dbg !39
  %120 = extractelement <2 x i64> %118, i64 1, !dbg !39
  %121 = or i64 %119, %120, !dbg !39
  %.not2 = icmp ult i64 %121, 2048, !dbg !39
  br i1 %.not2, label %123, label %122, !dbg !39

122:                                              ; preds = %105
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 843, ptr nonnull @assertFunc_2, i64 1), !dbg !39
  br label %123, !dbg !39

123:                                              ; preds = %122, %105
  %124 = shl i64 %120, 14, !dbg !40
  %125 = shl i64 %119, 14, !dbg !40
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !41
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %88, !dbg !41
  %128 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !41
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %89, !dbg !41
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !42
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !42
  %132 = insertelement <2 x i64> poison, i64 %62, i64 0, !dbg !43
  %133 = insertelement <2 x i64> %132, i64 %58, i64 1, !dbg !43
  %134 = lshr <2 x i64> %133, <i64 52, i64 52>, !dbg !43
  %135 = and <2 x i64> %134, <i64 2048, i64 2048>, !dbg !43
  %136 = add <2 x i64> %135, %133, !dbg !43
  %137 = extractelement <2 x i64> %136, i64 0, !dbg !44
  %138 = extractelement <2 x i64> %136, i64 1, !dbg !44
  %139 = or i64 %137, %138, !dbg !44
  %.not3 = icmp ult i64 %139, 2048, !dbg !44
  br i1 %.not3, label %141, label %140, !dbg !44

140:                                              ; preds = %123
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 843, ptr nonnull @assertFunc_3, i64 1), !dbg !44
  br label %141, !dbg !44

141:                                              ; preds = %140, %123
  %142 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !32
  %143 = bitcast i32 %142 to float, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !37
  %145 = bitcast i32 %144 to float, !dbg !37
  %146 = fadd float %143, %145, !dbg !45
  %147 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !42
  %148 = bitcast i32 %147 to float, !dbg !42
  %149 = fadd float %146, %148, !dbg !46
  %150 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !32
  %151 = bitcast i32 %150 to float, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !37
  %153 = bitcast i32 %152 to float, !dbg !37
  %154 = fadd float %151, %153, !dbg !45
  %155 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !42
  %156 = bitcast i32 %155 to float, !dbg !42
  %157 = fadd float %154, %156, !dbg !46
  %158 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !32
  %159 = bitcast i32 %158 to float, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !37
  %161 = bitcast i32 %160 to float, !dbg !37
  %162 = fadd float %159, %161, !dbg !45
  %163 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !42
  %164 = bitcast i32 %163 to float, !dbg !42
  %165 = fadd float %162, %164, !dbg !46
  %166 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !32
  %167 = bitcast i32 %166 to float, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !37
  %169 = bitcast i32 %168 to float, !dbg !37
  %170 = fadd float %167, %169, !dbg !45
  %171 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !42
  %172 = bitcast i32 %171 to float, !dbg !42
  %173 = fadd float %170, %172, !dbg !46
  %174 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %175 = bitcast i32 %174 to float, !dbg !32
  %176 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !37
  %177 = bitcast i32 %176 to float, !dbg !37
  %178 = fadd float %175, %177, !dbg !45
  %179 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !42
  %180 = bitcast i32 %179 to float, !dbg !42
  %181 = fadd float %178, %180, !dbg !46
  %182 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %183 = bitcast i32 %182 to float, !dbg !32
  %184 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !37
  %185 = bitcast i32 %184 to float, !dbg !37
  %186 = fadd float %183, %185, !dbg !45
  %187 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !42
  %188 = bitcast i32 %187 to float, !dbg !42
  %189 = fadd float %186, %188, !dbg !46
  %190 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %191 = bitcast i32 %190 to float, !dbg !32
  %192 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !37
  %193 = bitcast i32 %192 to float, !dbg !37
  %194 = fadd float %191, %193, !dbg !45
  %195 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !42
  %196 = bitcast i32 %195 to float, !dbg !42
  %197 = fadd float %194, %196, !dbg !46
  %198 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !37
  %201 = bitcast i32 %200 to float, !dbg !37
  %202 = fadd float %199, %201, !dbg !45
  %203 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !42
  %204 = bitcast i32 %203 to float, !dbg !42
  %205 = fadd float %202, %204, !dbg !46
  %206 = shl i64 %138, 14, !dbg !47
  %207 = shl i64 %137, 14, !dbg !47
  %208 = getelementptr float, ptr addrspace(1) %7, i64 %206, !dbg !48
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %88, !dbg !48
  %210 = getelementptr float, ptr addrspace(1) %7, i64 %207, !dbg !48
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %89, !dbg !48
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %209, i1 true) #1, !dbg !49
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !49
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !49
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !49
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !49
  %217 = bitcast i32 %213 to float, !dbg !49
  %218 = bitcast i32 %214 to float, !dbg !49
  %219 = bitcast i32 %215 to float, !dbg !49
  %220 = bitcast i32 %216 to float, !dbg !49
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 true) #1, !dbg !49
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !49
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !49
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !49
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !49
  %226 = bitcast i32 %222 to float, !dbg !49
  %227 = bitcast i32 %223 to float, !dbg !49
  %228 = bitcast i32 %224 to float, !dbg !49
  %229 = bitcast i32 %225 to float, !dbg !49
  %230 = fadd float %205, %217, !dbg !50
  %231 = fadd float %197, %218, !dbg !50
  %232 = fadd float %189, %219, !dbg !50
  %233 = fadd float %181, %220, !dbg !50
  %234 = fadd float %173, %226, !dbg !50
  %235 = fadd float %165, %227, !dbg !50
  %236 = fadd float %157, %228, !dbg !50
  %237 = fadd float %149, %229, !dbg !50
  %238 = lshr i64 %68, 52, !dbg !51
  %239 = and i64 %238, 2048, !dbg !51
  %240 = add i64 %239, %68, !dbg !51
  %241 = lshr i64 %72, 52, !dbg !51
  %242 = and i64 %241, 2048, !dbg !51
  %243 = add i64 %242, %72, !dbg !51
  %244 = shl i64 %240, 14, !dbg !52
  %245 = shl i64 %243, 14, !dbg !52
  %246 = getelementptr float, ptr addrspace(1) %9, i64 %244, !dbg !53
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %88, !dbg !53
  %248 = getelementptr float, ptr addrspace(1) %9, i64 %245, !dbg !53
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %89, !dbg !53
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 true) #1, !dbg !54
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !54
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !54
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !54
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !54
  %255 = bitcast i32 %251 to float, !dbg !54
  %256 = bitcast i32 %252 to float, !dbg !54
  %257 = bitcast i32 %253 to float, !dbg !54
  %258 = bitcast i32 %254 to float, !dbg !54
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 true) #1, !dbg !54
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !54
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !54
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !54
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !54
  %264 = bitcast i32 %260 to float, !dbg !54
  %265 = bitcast i32 %261 to float, !dbg !54
  %266 = bitcast i32 %262 to float, !dbg !54
  %267 = bitcast i32 %263 to float, !dbg !54
  %268 = fadd float %230, %255, !dbg !55
  %269 = fadd float %231, %256, !dbg !55
  %270 = fadd float %232, %257, !dbg !55
  %271 = fadd float %233, %258, !dbg !55
  %272 = fadd float %234, %264, !dbg !55
  %273 = fadd float %235, %265, !dbg !55
  %274 = fadd float %236, %266, !dbg !55
  %275 = fadd float %237, %267, !dbg !55
  %276 = sext i32 %18 to i64, !dbg !56
  %277 = getelementptr float, ptr addrspace(1) %10, i64 %276, !dbg !56
  %278 = sext i32 %19 to i64, !dbg !56
  %279 = getelementptr float, ptr addrspace(1) %10, i64 %278, !dbg !56
  %280 = bitcast float %268 to i32, !dbg !57
  %281 = bitcast float %269 to i32, !dbg !57
  %282 = bitcast float %270 to i32, !dbg !57
  %283 = bitcast float %271 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %277, i1 true) #1, !dbg !57
  %284 = bitcast float %272 to i32, !dbg !57
  %285 = bitcast float %273 to i32, !dbg !57
  %286 = bitcast float %274 to i32, !dbg !57
  %287 = bitcast float %275 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %279, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co55xjgaxp5ilqmmqrxhpn6yol5ai2tvn2ayuhi7bllhpzccyytk.py", directory: "/tmp/torchinductor_paperspace/o5")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 24, type: !9, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 26, column: 28, scope: !11)
!13 = !DILocation(line: 26, column: 33, scope: !11)
!14 = !DILocation(line: 27, column: 36, scope: !11)
!15 = !DILocation(line: 27, column: 23, scope: !11)
!16 = !DILocation(line: 29, column: 20, scope: !11)
!17 = !DILocation(line: 32, column: 30, scope: !11)
!18 = !DILocation(line: 32, column: 35, scope: !11)
!19 = !DILocation(line: 33, column: 30, scope: !11)
!20 = !DILocation(line: 33, column: 35, scope: !11)
!21 = !DILocation(line: 34, column: 31, scope: !11)
!22 = !DILocation(line: 34, column: 36, scope: !11)
!23 = !DILocation(line: 35, column: 31, scope: !11)
!24 = !DILocation(line: 35, column: 36, scope: !11)
!25 = !DILocation(line: 36, column: 31, scope: !11)
!26 = !DILocation(line: 36, column: 36, scope: !11)
!27 = !DILocation(line: 39, column: 32, scope: !11)
!28 = !DILocation(line: 40, column: 50, scope: !11)
!29 = !DILocation(line: 41, column: 42, scope: !11)
!30 = !DILocation(line: 41, column: 36, scope: !11)
!31 = !DILocation(line: 41, column: 30, scope: !11)
!32 = !DILocation(line: 41, column: 50, scope: !11)
!33 = !DILocation(line: 44, column: 32, scope: !11)
!34 = !DILocation(line: 45, column: 50, scope: !11)
!35 = !DILocation(line: 46, column: 42, scope: !11)
!36 = !DILocation(line: 46, column: 30, scope: !11)
!37 = !DILocation(line: 46, column: 50, scope: !11)
!38 = !DILocation(line: 50, column: 35, scope: !11)
!39 = !DILocation(line: 51, column: 52, scope: !11)
!40 = !DILocation(line: 52, column: 43, scope: !11)
!41 = !DILocation(line: 52, column: 31, scope: !11)
!42 = !DILocation(line: 52, column: 52, scope: !11)
!43 = !DILocation(line: 56, column: 35, scope: !11)
!44 = !DILocation(line: 57, column: 52, scope: !11)
!45 = !DILocation(line: 47, column: 19, scope: !11)
!46 = !DILocation(line: 53, column: 20, scope: !11)
!47 = !DILocation(line: 58, column: 43, scope: !11)
!48 = !DILocation(line: 58, column: 31, scope: !11)
!49 = !DILocation(line: 58, column: 52, scope: !11)
!50 = !DILocation(line: 59, column: 20, scope: !11)
!51 = !DILocation(line: 62, column: 35, scope: !11)
!52 = !DILocation(line: 64, column: 43, scope: !11)
!53 = !DILocation(line: 64, column: 31, scope: !11)
!54 = !DILocation(line: 64, column: 52, scope: !11)
!55 = !DILocation(line: 65, column: 20, scope: !11)
!56 = !DILocation(line: 66, column: 25, scope: !11)
!57 = !DILocation(line: 66, column: 37, scope: !11)
!58 = !DILocation(line: 66, column: 4, scope: !11)
